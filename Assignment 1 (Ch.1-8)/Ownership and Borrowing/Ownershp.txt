1
fn main() {
    // Use as many approaches as you can to make it work
    let x = String::from("hello world");
//use .clone() to make 2 copies
    let y = x.clone();
    println!("{}\n{}",x,y);
}

fn main() {
    // Use as many approaches as you can to make it work
    let x = String::from("hello world");
//use & to have 2 ptrs but 1 copy with the first ptr as the owner and the other as the borrower
//ptrs2 can modify the val that would then be also reflected in original
//this is ownership transferring
    let y = &x;
    println!("{}\n{}",x,y);
}

2// Don't modify code in main!
fn main() {
    let s1 = String::from("hello, world");
    let s2 = take_ownership(s1);

    println!("{}", s2);
}

// Only modify the code below!
fn take_ownership(s: String) -> String {
    println!("{}", s);
    s
}

3
fn main() {
    let s = give_ownership();
    println!("{}", s);
}

// Only modify the code below!
fn give_ownership() -> String {
    let s = String::from("hello, world");
    // Convert String to Vec
    let _s = s.as_bytes();
    s
}

4// Fix the error without removing code line
fn main() {
    let s = String::from("hello, world");

    print_str(s.clone());

    println!("{}", s);
}

fn print_str(s: String)  {
    println!("{}",s)
}


5

6
fn main() {
    let s = String::from("hello, ");
    
    // Modify this line only !
    let mut s1 = s; //how?

    s1.push_str("world");

    println!("Success!");
}

7
fn main() {
    let x = Box::new(5);
    
    let mut y=x.clone();      // Implement this line, dont change other lines!
    
    *y = 4;
    
    assert_eq!(*x, 5);

    println!("Success!");
}

8
fn main() {
   let t = (String::from("hello"), String::from("world"));

   let _s = t.0;

   // Modify this line only, don't use `_s`
   println!("{:?}", t.1);
}

9
fn main() {
   let t = (String::from("hello"), String::from("world"));

    // Fill the blanks
    let (s1, s2) = t.clone();

    println!("{:?}, {:?}, {:?}", s1, s2, t); // -> "hello", "world", ("hello", "world")
}
